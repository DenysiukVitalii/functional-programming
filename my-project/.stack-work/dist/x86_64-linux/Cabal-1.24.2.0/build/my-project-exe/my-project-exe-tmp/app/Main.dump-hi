
==================== FINAL INTERFACE ====================
2017-09-10 11:10:33.627814 UTC

interface main@main:Main 8002
  interface hash: 756eb1af7c62b927188cf38f380e0279
  ABI hash: b0fdc0faa574ae1e9392697ff435f140
  export-list hash: 417aea44cc32b5d85352de8e9b4c8bf6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2fb6519b4d0685ec9bb20bf9859b5c63
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.capitalize
  Main.cube
  Main.greater
  Main.main
  Main.myBuildLeft
  Main.myBuildRight
  Main.mySpace
  Main.offset
  Main.quad
  Main.smallBig
  Main.smaller
  Main.square
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Char 9d27e5fcb214fa9fb17cf295b3795fce
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  base-4.9.1.0:Text.Printf 6701574960cd2af960fec5d940be0c25
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
b4e074bd8d8a2e9ab6e38245937465ae
  capitalize :: GHC.Types.Char -> GHC.Types.Char
  {- Arity: 1, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ch :: GHC.Types.Char) ->
                 case ch of wild { GHC.Types.C# c# ->
                 let {
                   i# :: GHC.Prim.Int# = GHC.Prim.+# (GHC.Prim.ord# c#) -32#
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.leWord# (GHC.Prim.int2Word# i#) 1114111##) of wild1 {
                   GHC.Types.False -> GHC.Char.chr2 i#
                   GHC.Types.True -> GHC.Types.C# (GHC.Prim.chr# i#) } }) -}
21672b065c36d957077e43db4c3d0542
  cube :: GHC.Types.Float -> GHC.Types.Float
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Float) ->
                 case x of wild { GHC.Types.F# x1 ->
                 GHC.Types.F#
                   (GHC.Prim.timesFloat# (GHC.Prim.timesFloat# x1 x1) x1) }) -}
bbfdb20581047273a1a8bc96ca831930
  greater :: (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case ds of wild { (,) x y ->
                 case x of wild1 { GHC.Types.I# x1 ->
                 case y of wild2 { GHC.Types.I# y1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x1 y1) of wild3 {
                   GHC.Types.False -> wild2 GHC.Types.True -> wild1 } } } }) -}
d9c0dee8a685c5ed422401aaa63f23bf
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
01d62c2c484918d4b5d94b688c90c90e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
129a1a814fa667791781f32a098e848d
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
c961f60bae68edbd71c48d291ffabf2e
  myBuildLeft :: GHC.Types.Int -> [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                (GHC.Types.: @ GHC.Types.Int) -}
a09d146af16b1061e47e1474ca213bb1
  myBuildRight :: GHC.Types.Int -> [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ls :: [GHC.Types.Int]) ->
                 GHC.Base.augment
                   @ GHC.Types.Int
                   (\ @ b (c :: GHC.Types.Int -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Int @ b c n ls)
                   (GHC.Types.: @ GHC.Types.Int x (GHC.Types.[] @ GHC.Types.Int))) -}
409559056476d243fb2b94fcd361b2ce
  mySpace :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (c :: GHC.Types.Char) ->
                 case c of wild { GHC.Types.C# x ->
                 case x of wild1 {
                   DEFAULT -> GHC.Types.False ' '# -> GHC.Types.True } }) -}
60dd76bfb00d2a5d0827b19b882b9dd1
  offset :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -32#) -}
b60062a47d5bbd464449c4019fe4029c
  quad :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Int) ->
                 let {
                   x1 :: GHC.Types.Int
                   = case x of wild { GHC.Types.I# x2 ->
                     GHC.Types.I# (GHC.Prim.*# x2 x2) }
                 } in
                 GHC.Num.$fNumInt_$c* x1 x1) -}
2ebad2a132f84f05a41d13a1e7f50d86
  smallBig ::
    (GHC.Types.Int, GHC.Types.Int) -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case ds of wild { (,) x y ->
                 case x of wild1 { GHC.Types.I# x1 ->
                 case y of wild2 { GHC.Types.I# y1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x1 y1) of wild3 {
                   GHC.Types.False -> (wild2, wild1)
                   GHC.Types.True -> (wild1, wild2) } } } }) -}
6acf63088e0b5c86befda75b78fd094b
  smaller :: (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case ds of wild { (,) x y ->
                 case x of wild1 { GHC.Types.I# x1 ->
                 case y of wild2 { GHC.Types.I# y1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x1 y1) of wild3 {
                   GHC.Types.False -> wild2 GHC.Types.True -> wild1 } } } }) -}
58627e3b1c685f5c36229e8c21573986
  square :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Int) -> GHC.Num.$fNumInt_$c* x x) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

